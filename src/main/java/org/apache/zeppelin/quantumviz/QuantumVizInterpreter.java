//
//   Copyright 2016  Cityzen Data
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//

package org.apache.zeppelin.quantumviz;


import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;

import javax.net.ssl.HttpsURLConnection;

import org.apache.zeppelin.interpreter.Interpreter;
import org.apache.zeppelin.interpreter.InterpreterContext;
import org.apache.zeppelin.interpreter.InterpreterPropertyBuilder;
import org.apache.zeppelin.interpreter.InterpreterResult;
import org.apache.zeppelin.resource.Resource;
import org.apache.zeppelin.resource.ResourcePool;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**
 * Interpreter QuantumViz for Zeppelin
 * 
 */
public class QuantumVizInterpreter extends Interpreter
{

  //
  // Private Pair class
  //

  private class Pair<F, S> {
    private F first;
    private S second;

    public Pair(F first, S second) {
      super();
      this.first = first;
      this.second = second;
    }

  }

  static final String DEFAULT_URL = "http://localhost:8080/api/v0";
  static final String URL_KEY = "warp10.url";
  String current_Url;

  private final HashMap<String, Properties> propertiesMap;

  public QuantumVizInterpreter(Properties property) {
    super(property);
    //
    propertiesMap = new HashMap<>();
    //property.
  }

  public HashMap<String, Properties> getPropertiesMap() {
    return propertiesMap;
  }

  static {
    Interpreter.register("quantumviz", QuantumVizInterpreter.class.getName());
    new InterpreterPropertyBuilder().add(URL_KEY, DEFAULT_URL, "The URL for Warp10.");
  }

  @Override
  public void cancel(InterpreterContext arg0) {
    //

  }

  @Override
  public void close() {

  }

  @Override
  public List<String> completion(String arg0, int arg1) {
    //
    return null;
  }

  @Override
  public FormType getFormType() {
    //
    return FormType.SIMPLE;
  }

  //@Override
  public int getProgress(InterpreterContext arg0) {
    //
    return 0;
  }

  //@Override
  //
  // When the result of the WarpScript contains a Map on top of the stack
  // then all the tuples key,value are saved in Angular variables.
  // To ensure a Map on top of the stack the WarpScript function EXPORT can be used
  // When using Angular to save variable NaN and Infinity are transformed in String !
  //
  public InterpreterResult interpret(String body, InterpreterContext context) {

    System.out.println(context.getConfig().toString());
    //
    // Store the resource pool already defined in context
    //

    ResourcePool resources = context.getResourcePool();

    StringBuilder res = new StringBuilder();
    res.append("\"\"\"%html ");
    res.append("<script> "
        + "if (!jsCode) {"
        + "var jsCode = document.createElement('script');"
        // 'https://warp.cityzendata.net/quantumviz/latest/webcomponentsjs/webcomponents-lite.js'
        + "jsCode.setAttribute('src', '" + current_Url + "/webcomponentsjs/webcomponents-lite.js'); "
        + "document.body.appendChild(jsCode); "
        + "} "
        + "</script> ");
    res.append("<link   rel=\"import\" href=\"" + current_Url + "/polymer/polymer.html\"> ");
    res.append("<link   rel=\"import\" href=\"" + current_Url + "/warp10-quantumviz/warp10-display-chart.html\"> ");
    String bodyLines[] = body.split("\n");
    //String areWords = "";

    //res.append(bodyLines.length);
    
    for (String line : bodyLines) {
      
      res.append("<div>");
      res.append("<warp10-display-chart width=\"800\" height=\"600\" ");
      
      String[] words = line.split("\\s+");
      
      StringBuilder currentGraphs = new StringBuilder();
      for (String word : words) {
        Resource resource = resources.get(word);

        //areWords += word + " ";
        if (resource != null) {
          Object value = resources.get(word).get();
          currentGraphs.append(parseObjectToString(value));
        }
      }
      
      
      res.append("data='" + currentGraphs.toString() + "'");
      
      //res.append("data='[{\"gts\":[{\"c\":\"com.cityzendata.tutorial.sensors.temperature\",\"l\":{\".app\":\"doc.data\",\"sensorId\":\"03\"},\"a\":{},\"v\":[[1389139200000000,15.83],[1389139110199999,15.96],[1389139020399998,15.305],[1389138930599997,15.01],[1389138840799996,15.295],[1389138750999995,15.39],[1389138661199994,15.629999999999999],[1389138571399993,15.47],[1389138481599992,15.71],[1389138391799991,16.13],[1389138301999990,15.745000000000001],[1389138212199989,16.02],[1389138122399988,16.59],[1389138032599987,16.96],[1389137942799986,16.689999999999998],[1389137852999985,16.47],[1389137763199984,17.14],[1389137673399983,16.91],[1389137583599982,16.395000000000003],[1389137493799981,16.54],[1389137403999980,16.28],[1389137314199979,16.86],[1389137224399978,16.615000000000002],[1389137134599977,16.95],[1389137044799976,16.345],[1389136954999975,15.82],[1389136865199974,15.510000000000002],[1389136775399973,14.87],[1389136685599972,14.805],[1389136595799971,14.94],[1389136505999970,14.94],[1389136416199969,15.3],[1389136326399968,15.165],[1389136236599967,15.5],[1389136146799966,15.625],[1389136056999965,15.75],[1389135967199964,15.91],[1389135877399963,15.66],[1389135787599962,16.115],[1389135697799961,16.42],[1389135607999960,16.415],[1389135518199959,16.22],[1389135428399958,15.965],[1389135338599957,16.33],[1389135248799956,16.66],[1389135158999955,16.72],[1389135069199954,16.935000000000002],[1389134979399953,16.59],[1389134889599952,16.025],[1389134799799951,15.33],[1389134709999950,15.445],[1389134620199949,14.81],[1389134530399948,15.24],[1389134440599947,15.32],[1389134350799946,15.165],[1389134260999945,14.74],[1389134171199944,15.415],[1389134081399943,16.08],[1389133991599942,16.384999999999998],[1389133901799941,16.17],[1389133811999940,16.22],[1389133722199939,16.33],[1389133632399938,16.32],[1389133542599937,15.92],[1389133452799936,15.535],[1389133362999935,15.15],[1389133273199934,15.235],[1389133183399933,15.57],[1389133093599932,15.985],[1389133003799931,15.93],[1389132913999930,15.64],[1389132824199929,15.21],[1389132734399928,15.14],[1389132644599927,15.28],[1389132554799926,15.295],[1389132464999925,15.48],[1389132375199924,15.89],[1389132285399923,16.48],[1389132195599922,16.28],[1389132105799921,16.59],[1389132015999920,16.409999999999997],[1389131926199919,15.83],[1389131836399918,15.995000000000001],[1389131746599917,16.23],[1389131656799916,15.995000000000001],[1389131566999915,15.58],[1389131477199914,15.850000000000001],[1389131387399913,15.69],[1389131297599912,15.305],[1389131207799911,15.73],[1389131117999910,15.309999999999999],[1389131028199909,15.51],[1389130938399908,16.05],[1389130848599907,16.13],[1389130758799906,15.879999999999999],[1389130668999905,15.76],[1389130579199904,15.114999999999998],[1389130489399903,15.0],[1389130399599902,15.015],[1389130309799901,15.06],[1389130219999900,15.44],[1389130130199899,15.11],[1389130040399898,14.915],[1389129950599897,15.07],[1389129860799896,15.245000000000001],[1389129770999895,15.35],[1389129681199894,15.995],[1389129591399893,16.63],[1389129501599892,17.195],[1389129411799891,17.42],[1389129321999890,16.950000000000003],[1389129232199889,16.81],[1389129142399888,16.65],[1389129052599887,16.56],[1389128962799886,15.905],[1389128872999885,15.47],[1389128783199884,15.105],[1389128693399883,15.14],[1389128603599882,14.86],[1389128513799881,14.98],[1389128423999880,14.915],[1389128334199879,15.13],[1389128244399878,15.2],[1389128154599877,15.51],[1389128064799876,15.25],[1389127974999875,15.85],[1389127885199874,15.965],[1389127795399873,16.48],[1389127705599872,16.765],[1389127615799871,16.92],[1389127525999870,17.335],[1389127436199869,17.18],[1389127346399868,17.78],[1389127256599867,18.14],[1389127166799866,18.34],[1389127076999865,18.31],[1389126987199864,18.205],[1389126897399863,17.65],[1389126807599862,18.02],[1389126717799861,18.71],[1389126627999860,19.085],[1389126538199859,19.11],[1389126448399858,18.925],[1389126358599857,18.73],[1389126268799856,18.240000000000002],[1389126178999855,18.06],[1389126089199854,17.715],[1389125999399853,17.87],[1389125909599852,17.945],[1389125819799851,17.96],[1389125729999850,18.34],[1389125640199849,17.98],[1389125550399848,17.33],[1389125460599847,17.455],[1389125370799846,17.18],[1389125280999845,16.85],[1389125191199844,16.72],[1389125101399843,16.494999999999997],[1389125011599842,16.47],[1389124921799841,16.09],[1389124831999840,15.75],[1389124742199839,15.57],[1389124652399838,15.57],[1389124562599837,15.48],[1389124472799836,14.88],[1389124382999835,14.945],[1389124293199834,15.43],[1389124203399833,15.245000000000001],[1389124113599832,15.77],[1389124023799831,16.165],[1389123933999830,16.31],[1389123844199829,16.585],[1389123754399828,17.04],[1389123664599827,17.3],[1389123574799826,17.21],[1389123484999825,17.57],[1389123395199824,18.03],[1389123305399823,18.21],[1389123215599822,18.91],[1389123125799821,18.509999999999998],[1389123035999820,18.14],[1389122946199819,18.33],[1389122856399818,17.9],[1389122766599817,17.535],[1389122676799816,17.2],[1389122586999815,17.205],[1389122497199814,17.13],[1389122407399813,17.314999999999998],[1389122317599812,17.93],[1389122227799811,18.075000000000003],[1389122137999810,18.49],[1389122048199809,18.915],[1389121958399808,19.2],[1389121868599807,19.28],[1389121778799806,19.17],[1389121688999805,19.755000000000003],[1389121599199804,19.68],[1389121509399803,19.880000000000003],[1389121419599802,19.5],[1389121329799801,19.22],[1389121239999800,18.84],[1389121150199799,18.975],[1389121060399798,19.38],[1389120970599797,19.66],[1389120880799796,19.41],[1389120790999795,19.17],[1389120701199794,19.57],[1389120611399793,19.72],[1389120521599792,20.3],[1389120431799791,20.68],[1389120341999790,20.42],[1389120252199789,20.59],[1389120162399788,21.04],[1389120072599787,20.465],[1389119982799786,19.82],[1389119892999785,20.245],[1389119803199784,19.84],[1389119713399783,19.854999999999997],[1389119623599782,20.21],[1389119533799781,20.64],[1389119443999780,20.19],[1389119354199779,20.075000000000003],[1389119264399778,20.51],[1389119174599777,21.060000000000002],[1389119084799776,20.88],[1389118994999775,20.845],[1389118905199774,21.28],[1389118815399773,21.064999999999998],[1389118725599772,21.61],[1389118635799771,22.075],[1389118545999770,22.28],[1389118456199769,22.915],[1389118366399768,22.89],[1389118276599767,23.445],[1389118186799766,23.07],[1389118096999765,23.265],[1389118007199764,23.32],[1389117917399763,23.799999999999997],[1389117827599762,24.26],[1389117737799761,24.215],[1389117647999760,24.61],[1389117558199759,24.84],[1389117468399758,24.94],[1389117378599757,25.325000000000003],[1389117288799756,25.9],[1389117198999755,25.825000000000003],[1389117109199754,25.3],[1389117019399753,25.134999999999998],[1389116929599752,24.6],[1389116839799751,24.740000000000002],[1389116749999750,25.09],[1389116660199749,25.25],[1389116570399748,25.52],[1389116480599747,24.875],[1389116390799746,24.77],[1389116300999745,24.990000000000002],[1389116211199744,24.63],[1389116121399743,24.53],[1389116031599742,24.46],[1389115941799741,24.23],[1389115851999740,23.81],[1389115762199739,23.65],[1389115672399738,23.08],[1389115582599737,22.564999999999998],[1389115492799736,22.42],[1389115402999735,22.745],[1389115313199734,23.05],[1389115223399733,22.835],[1389115133599732,22.84],[1389115043799731,22.675],[1389114953999730,22.99],[1389114864199729,22.775],[1389114774399728,22.86],[1389114684599727,22.29],[1389114594799726,22.33],[1389114504999725,22.615],[1389114415199724,22.94],[1389114325399723,23.43],[1389114235599722,23.95],[1389114145799721,23.775],[1389114055999720,23.95],[1389113966199719,24.545],[1389113876399718,24.23],[1389113786599717,24.54],[1389113696799716,24.78],[1389113606999715,24.785],[1389113517199714,24.56],[1389113427399713,24.380000000000003],[1389113337599712,24.56],[1389113247799711,24.765],[1389113157999710,24.49],[1389113068199709,24.685],[1389112978399708,25.0],[1389112888599707,24.785],[1389112798799706,24.14],[1389112708999705,23.54],[1389112619199704,23.77],[1389112529399703,24.36],[1389112439599702,24.75],[1389112349799701,25.07]]},{\"c\":\"com.cityzendata.tutorial.sensors.temperature\",\"l\":{\".app\":\"doc.data\",\"sensorId\":\"02\"},\"a\":{},\"v\":[[1389139200000000,23.045],[1389139110199999,22.57],[1389139020399998,22.134999999999998],[1389138930599997,21.82],[1389138840799996,22.14],[1389138750999995,22.0],[1389138661199994,21.89],[1389138571399993,21.34],[1389138481599992,21.025],[1389138391799991,21.37],[1389138301999990,21.235],[1389138212199989,21.76],[1389138122399988,22.04],[1389138032599987,22.18],[1389137942799986,22.564999999999998],[1389137852999985,22.42],[1389137763199984,22.61],[1389137673399983,22.25],[1389137583599982,21.93],[1389137493799981,22.0],[1389137403999980,21.689999999999998],[1389137314199979,21.67],[1389137224399978,22.384999999999998],[1389137134599977,22.17],[1389137044799976,22.165],[1389136954999975,21.79],[1389136865199974,22.055],[1389136775399973,22.49],[1389136685599972,21.97],[1389136595799971,21.42],[1389136505999970,21.865000000000002],[1389136416199969,22.29],[1389136326399968,22.47],[1389136236599967,22.05],[1389136146799966,22.575],[1389136056999965,22.87],[1389135967199964,22.81],[1389135877399963,22.83],[1389135787599962,22.985],[1389135697799961,23.26],[1389135607999960,22.85],[1389135518199959,22.21],[1389135428399958,21.96],[1389135338599957,22.18],[1389135248799956,21.685],[1389135158999955,21.71],[1389135069199954,21.515],[1389134979399953,21.22],[1389134889599952,20.805],[1389134799799951,20.58],[1389134709999950,20.1],[1389134620199949,19.99],[1389134530399948,19.765],[1389134440599947,19.99],[1389134350799946,20.405],[1389134260999945,20.84],[1389134171199944,20.83],[1389134081399943,21.12],[1389133991599942,21.275],[1389133901799941,20.8],[1389133811999940,20.65],[1389133722199939,20.88],[1389133632399938,20.875],[1389133542599937,21.58],[1389133452799936,21.335],[1389133362999935,21.34],[1389133273199934,20.915],[1389133183399933,20.5],[1389133093599932,20.415],[1389133003799931,20.65],[1389132913999930,20.53],[1389132824199929,20.92],[1389132734399928,20.695],[1389132644599927,20.18],[1389132554799926,20.134999999999998],[1389132464999925,20.13],[1389132375199924,20.43],[1389132285399923,20.6],[1389132195599922,20.490000000000002],[1389132105799921,20.85],[1389132015999920,20.884999999999998],[1389131926199919,20.45],[1389131836399918,20.25],[1389131746599917,20.41],[1389131656799916,20.055],[1389131566999915,20.15],[1389131477199914,19.835],[1389131387399913,20.38],[1389131297599912,20.67],[1389131207799911,21.06],[1389131117999910,21.215],[1389131028199909,20.73],[1389130938399908,21.03],[1389130848599907,21.26],[1389130758799906,21.835],[1389130668999905,22.08],[1389130579199904,22.71],[1389130489399903,23.39],[1389130399599902,23.64],[1389130309799901,23.33],[1389130219999900,22.845],[1389130130199899,23.21],[1389130040399898,22.775],[1389129950599897,23.07],[1389129860799896,22.450000000000003],[1389129770999895,22.44],[1389129681199894,21.9],[1389129591399893,22.0],[1389129501599892,21.85],[1389129411799891,21.99],[1389129321999890,21.775],[1389129232199889,21.8],[1389129142399888,21.545],[1389129052599887,21.52],[1389128962799886,21.87],[1389128872999885,21.86],[1389128783199884,22.064999999999998],[1389128693399883,22.03],[1389128603599882,21.814999999999998],[1389128513799881,21.87],[1389128423999880,21.47],[1389128334199879,21.93],[1389128244399878,22.549999999999997],[1389128154599877,22.93],[1389128064799876,23.174999999999997],[1389127974999875,23.23],[1389127885199874,23.715],[1389127795399873,23.65],[1389127705599872,23.82],[1389127615799871,23.59],[1389127525999870,23.86],[1389127436199869,23.63],[1389127346399868,23.14],[1389127256599867,23.07],[1389127166799866,22.875],[1389127076999865,22.76],[1389126987199864,22.755000000000003],[1389126897399863,23.26],[1389126807599862,23.505],[1389126717799861,23.57],[1389126627999860,23.845],[1389126538199859,24.27],[1389126448399858,24.165],[1389126358599857,24.03],[1389126268799856,24.13],[1389126178999855,24.73],[1389126089199854,24.47],[1389125999399853,24.87],[1389125909599852,24.335],[1389125819799851,24.2],[1389125729999850,24.13],[1389125640199849,24.395],[1389125550399848,24.89],[1389125460599847,25.17],[1389125370799846,25.16],[1389125280999845,24.884999999999998],[1389125191199844,25.26],[1389125101399843,25.45],[1389125011599842,24.89],[1389124921799841,25.045],[1389124831999840,25.26],[1389124742199839,25.335],[1389124652399838,24.76],[1389124562599837,24.695],[1389124472799836,24.47],[1389124382999835,24.0],[1389124293199834,23.51],[1389124203399833,23.475],[1389124113599832,23.5],[1389124023799831,23.825],[1389123933999830,23.81],[1389123844199829,23.810000000000002],[1389123754399828,23.87],[1389123664599827,23.955],[1389123574799826,23.76],[1389123484999825,24.18],[1389123395199824,24.36],[1389123305399823,24.825000000000003],[1389123215599822,24.8],[1389123125799821,25.085],[1389123035999820,24.96],[1389122946199819,25.375],[1389122856399818,24.94],[1389122766599817,24.615000000000002],[1389122676799816,24.35],[1389122586999815,25.02],[1389122497199814,24.82],[1389122407399813,25.134999999999998],[1389122317599812,25.31],[1389122227799811,25.15],[1389122137999810,24.96],[1389122048199809,24.265],[1389121958399808,23.63],[1389121868599807,23.585],[1389121778799806,23.81],[1389121688999805,23.645],[1389121599199804,23.91],[1389121509399803,24.17],[1389121419599802,24.27],[1389121329799801,24.57],[1389121239999800,24.51],[1389121150199799,24.245],[1389121060399798,24.38],[1389120970599797,24.965],[1389120880799796,25.04],[1389120790999795,25.22],[1389120701199794,24.88],[1389120611399793,24.994999999999997],[1389120521599792,25.12],[1389120431799791,25.655],[1389120341999790,25.52],[1389120252199789,25.355],[1389120162399788,25.56],[1389120072599787,25.585],[1389119982799786,25.23],[1389119892999785,24.91],[1389119803199784,24.45],[1389119713399783,24.185],[1389119623599782,24.51],[1389119533799781,24.345],[1389119443999780,24.96],[1389119354199779,25.025],[1389119264399778,24.39],[1389119174599777,24.634999999999998],[1389119084799776,24.5],[1389118994999775,24.325000000000003],[1389118905199774,24.47],[1389118815399773,25.04],[1389118725599772,24.71],[1389118635799771,24.795],[1389118545999770,24.55],[1389118456199769,24.42],[1389118366399768,24.28],[1389118276599767,23.689999999999998],[1389118186799766,23.99],[1389118096999765,23.875],[1389118007199764,23.97],[1389117917399763,24.345],[1389117827599762,24.71],[1389117737799761,25.14],[1389117647999760,24.81],[1389117558199759,24.509999999999998],[1389117468399758,24.13],[1389117378599757,24.259999999999998],[1389117288799756,23.97],[1389117198999755,23.82],[1389117109199754,24.22],[1389117019399753,24.155],[1389116929599752,24.01],[1389116839799751,23.665],[1389116749999750,23.59],[1389116660199749,24.125],[1389116570399748,24.3],[1389116480599747,24.685],[1389116390799746,25.03],[1389116300999745,24.935],[1389116211199744,25.52],[1389116121399743,25.765],[1389116031599742,25.49],[1389115941799741,25.365000000000002],[1389115851999740,25.16],[1389115762199739,25.4],[1389115672399738,25.12],[1389115582599737,24.89],[1389115492799736,24.32],[1389115402999735,23.82],[1389115313199734,23.64],[1389115223399733,23.195],[1389115133599732,23.07],[1389115043799731,23.165],[1389114953999730,23.47],[1389114864199729,23.25],[1389114774399728,23.07],[1389114684599727,22.755],[1389114594799726,23.13],[1389114504999725,23.435000000000002],[1389114415199724,22.85],[1389114325399723,22.799999999999997],[1389114235599722,22.89],[1389114145799721,22.96],[1389114055999720,22.55],[1389113966199719,21.915],[1389113876399718,21.78],[1389113786599717,21.665],[1389113696799716,21.48],[1389113606999715,21.72],[1389113517199714,21.47],[1389113427399713,21.490000000000002],[1389113337599712,21.69],[1389113247799711,21.55],[1389113157999710,21.66],[1389113068199709,21.0],[1389112978399708,20.9],[1389112888599707,20.835],[1389112798799706,20.85],[1389112708999705,20.174999999999997],[1389112619199704,19.54],[1389112529399703,19.64],[1389112439599702,19.83],[1389112349799701,19.92]]}],\"params\":[{\"color\":\"#ff1010\",\"key\":\"Temperature A\"},{\"color\":\"#1010ff\",\"key\":\"Temperature B\"}],\"globalParams\":{\"interpolate\":\"linear\"}}]'");
      
      res.append(" </warp10-quantumviz> <p> </p>");

      res.append("</div>");
      System.out.println(res.toString());
    }
    //res.append("\"\"\"");

    return new InterpreterResult(InterpreterResult.Code.SUCCESS, res.toString());

  }

  private String parseObjectToString(Object object) {

    if ( object instanceof Number ) {
      return object.toString();
    } else if ( object instanceof String ) {
      return object.toString(); 
    } else if (object instanceof List) {
      JSONArray array = new JSONArray();

      for (Object element : (List) object) {
        array.put(element);
      }
      return array.toString();
    } else if (object instanceof Map) {
      JSONObject map = new JSONObject();
      Map mapObj = (Map) object;
      for (Object key : mapObj.keySet()) {
        map.put(key.toString(), mapObj.get(key));
      }
      return map.toString();
    }
    return "";
  }

  private Object parseObject(Object object) {
    if (isListJSONValid(object.toString())) {
      ArrayList<Object> thisList = new ArrayList<>();
      JSONArray listObjects = new JSONArray(object.toString());
      for (Object currentElem : listObjects) {
        thisList.add(parseObject(currentElem));
      }
      //parseType.put(object.toString(), "List");
      return thisList;
    } else if (isMapJSONValid(object.toString())) {
      Map<Object, Object> map = new HashMap<>();
      JSONObject mapObjects = new JSONObject(object.toString());
      for (String element : mapObjects.keySet()) {
        map.put(element, parseObject(mapObjects.get(element)));
      }
      //parseType.put(object.toString(), "Map");
      return map;
    } else {
      //parseType.put(object.toString(), object.getClass().toString());
      return object;
    }
  }

  /**
   * Function to test if a String is a Valid JSON Map
   * @param test String to test
   * @return
   */
  public boolean isMapJSONValid(String test) {
    try {
      new JSONObject(test);
    } catch (JSONException ex) {
      return false;
    }
    return true;
  }

  /**
   * Function to test if a String is a Valid JSON List
   * @param test String to test
   * @return
   */
  public boolean isListJSONValid(String test) {
    try {
      new JSONArray(test);
    } catch (JSONException ex) {
      return false;
    }
    return true;
  }

  //@Override
  public void open() {

    //
    // Load the property URL KEY, if defined reach this URL otherwise default URL
    //

    final String keyValue = getProperty(URL_KEY);
    if (null != keyValue) {
      this.current_Url = keyValue;
    } else {
      this.current_Url = DEFAULT_URL;
    }
    
    //Map<>
  }

  public Pair<InterpreterResult.Code, String> execRequest(String body) throws Exception {

    //
    // Execute the request on current url defined
    //

    String url = this.current_Url;
    url += "/exec";
    URL obj = new URL(url);
    HttpURLConnection con = null;

    //
    // If HTTPS execute an HTTPS connection
    //

    if (url.startsWith("https")) {
      con = (HttpsURLConnection) obj.openConnection();
    } else {
      con = (HttpURLConnection) obj.openConnection();
    }

    //add request header
    con.setDoOutput(true);
    con.setDoInput(true);
    con.setRequestMethod("POST");
    con.setChunkedStreamingMode(16384);
    con.connect();

    //
    // Write the body in the request
    //

    OutputStream os = con.getOutputStream();
    //GZIPOutputStream out = new GZIPOutputStream(os);
    PrintWriter pw = new PrintWriter(os);  
    pw.println(body);
    pw.close();

    StringBuffer response = new StringBuffer();
    Pair<InterpreterResult.Code, String> resultPair = null;

    //
    // If answer equals 200 parse result stream, otherwise error Stream
    //

    if (200 == con.getResponseCode()) {
      BufferedReader in = new BufferedReader(
          new InputStreamReader(con.getInputStream()));
      String inputLine;

      while ((inputLine = in.readLine()) != null) {
        response.append(inputLine);
      }
      resultPair = new Pair<InterpreterResult.Code, String>(InterpreterResult.Code.SUCCESS, 
          response.toString());
      in.close();
      con.disconnect();
    } else {
      String errorLine = "\"Error-Line\":" + con.getHeaderField("X-Warp10-Error-Line");
      String errorMsg = "\"Error-Message\":\"" 
          + con.getHeaderField("X-Warp10-Error-Message") + "\"";
      response.append("[{");
      response.append(errorLine + ",");
      response.append(errorMsg);
      boolean getBody = (null == con.getContentType());
      if (!getBody && !con.getContentType().startsWith("text/html")) {
        getBody = true;
      }
      if (getBody) {
        response.append(",\"Body\":\"");
        BufferedReader in = new BufferedReader(
            new InputStreamReader(con.getErrorStream()));
        String inputLine;

        while ((inputLine = in.readLine()) != null) {
          response.append(inputLine);
        }
        in.close();
        response.append("\"");
      }
      response.append("}]");
      resultPair = new Pair<InterpreterResult.Code, String>(InterpreterResult.Code.ERROR, 
          response.toString());
      con.disconnect();
    }

    //
    // Return the body message with its associated code (SUCESS or ERROR)
    //

    return resultPair;
  }
}
